type: custom:stack-in-card
cards:
  # ===== ROW 1: Header (left) + Controls (right) =====
  - type: horizontal-stack
    cards:
      # -- Left: header/state with % and icon progress ring
      - type: custom:mushroom-template-card
        entity: camera.k1c_printer_camera
        primary: "K1C — 3D Printer"
        secondary: >
          {% set st = states('sensor.k1c_print_status')|lower %}
          {% set pct = states('sensor.k1c_print_progress')|int(0) %}
          {% set plug = states('switch.plug_5_ikea_k1c')|lower if states('switch.plug_5_ikea_k1c') is defined else 'on' %}
          {% if plug == 'off' or st in ['off'] %}Off
          {% elif st in ['printing','resuming','pausing','paused'] %}{{ pct }}% {{ st|title }}
          {% elif st in ['idle','completed','error','unknown'] %}{{ st|title }}
          {% else %}Unknown{% endif %}
        icon: >
          {% set st = states('sensor.k1c_print_status')|lower %}
          {% set plug = states('switch.plug_5_ikea_k1c')|lower if states('switch.plug_5_ikea_k1c') is defined else 'on' %}
          {% if plug == 'off' or st in ['off','unknown'] %}mdi:printer-3d-off
          {% elif st in ['printing','resuming','pausing','paused'] %}mdi:printer-3d-nozzle
          {% elif st == 'error' %}mdi:close-octagon
          {% else %}mdi:printer-3d
          {% endif %}
        icon_color: >
          {% set st = states('sensor.k1c_print_status')|lower %}
          {% set plug = states('switch.plug_5_ikea_k1c')|lower if states('switch.plug_5_ikea_k1c') is defined else 'on' %}
          {% if plug == 'off' or st in ['off','unknown'] %}
            grey
          {% elif st in ['paused','pausing'] %}
            #fc6d09
          {% elif st == 'error' %}
            red
          {% elif st in ['printing','resuming'] %}
            var(--primary-color)
          {% elif st in ['idle','completed'] %}
            green
          {% else %}
            grey
          {% endif %}
        tap_action: { action: more-info }
        card_mod:
          style:
            mushroom-shape-icon$: |
              {% set st = states('sensor.k1c_print_status')|lower %}
              {% set pct = states('sensor.k1c_print_progress')|int(0) %}
              .shape { --icon-size: 80px; }        /* outer ring size */
              ha-state-icon {                      /* actual glyph size + off=grey */
                --icon-symbol-size: 40px;
                width: 40px; height: 40px;
                color:
                {% set plug = states('switch.plug_5_ikea_k1c')|lower if states('switch.plug_5_ikea_k1c') is defined else 'on' %}
                {% if plug == 'off' or st in ['off','unknown'] %} grey {% else %} inherit {% endif %} ;
              }
              .shape {
                {% if st in ['printing','resuming','pausing','paused'] %}
                  background:
                    radial-gradient(var(--card-background-color) 60%, transparent 0),
                    conic-gradient(
                      var(--primary-color) {{ pct }}%,
                      rgba(var(--rgb-grey),0.25) {{ pct }}%
                    );
                {% else %}
                  background: none;
                {% endif %}
              }
            .: |
              ha-card { padding: 10px 12px 0 12px; --ha-card-border-width: 0; }
            
      # -- Right: icon-only controls aligned with header
      - type: custom:mushroom-chips-card
        alignment: end
        chips:
          # Pause (printing/resuming/pausing)
          - type: conditional
            conditions:
              - condition: or
                conditions:
                  - condition: state
                    entity: sensor.k1c_print_status
                    state: printing
                  - condition: state
                    entity: sensor.k1c_print_status
                    state: resuming
                  - condition: state
                    entity: sensor.k1c_print_status
                    state: pausing
            chip:
              type: entity
              entity: button.k1c_pause_print
              icon: mdi:pause
              content_info: none
              tap_action: { action: toggle }
              card_mod:
                style: "ha-card{--chip-background: rgba(var(--rgb-orange),0.9); --icon-color: rgb(var(--rgb-white)); border:none}"

          # Resume (paused)
          - type: conditional
            conditions:
              - condition: state
                entity: sensor.k1c_print_status
                state: paused
            chip:
              type: entity
              entity: button.k1c_resume_print
              icon: mdi:play
              content_info: none
              tap_action: { action: toggle }
              card_mod:
                style: "ha-card{--chip-background: rgba(var(--rgb-green),0.9); --icon-color: rgb(var(--rgb-white)); border:none}"

          # Stop (printing or paused)
          - type: conditional
            conditions:
              - condition: or
                conditions:
                  - condition: state
                    entity: sensor.k1c_print_status
                    state: printing
                  - condition: state
                    entity: sensor.k1c_print_status
                    state: resuming
                  - condition: state
                    entity: sensor.k1c_print_status
                    state: pausing
                  - condition: state
                    entity: sensor.k1c_print_status
                    state: paused
            chip:
              type: entity
              entity: button.k1c_stop_print
              icon: mdi:stop
              content_info: none
              tap_action: { action: toggle }
              card_mod:
                style: "ha-card{--chip-background: rgba(var(--rgb-red),0.95); --icon-color: rgb(var(--rgb-white)); border:none}"

          # spacer
          - type: template
            icon: mdi:blank
            content: ""
            card_mod:
              style: |
                ha-card { background: transparent; border: none; pointer-events: none; width: 24px; }

          # Light toggle (always)
          - type: template
            entity: switch.k1c_light
            icon: mdi:lightbulb
            content: ""
            icon_color: >
              {% if is_state('switch.k1c_light','on') %}orange{% else %}lightgrey{% endif %}
            tap_action: { action: toggle }
            card_mod:
              style: >
                ha-card{
                  border:none;
                  {% if is_state('switch.k1c_light','on') -%}
                  --chip-background: rgba(var(--rgb-yellow),0.95);
                  {%- else -%}
                  --chip-background: rgba(var(--rgb-grey),0.35);
                  {%- endif %}
                }
        card_mod:
          style: |
            ha-card{
              --ha-card-border-width: 0;
              padding: 24px 28px 0 0;   /* your alignment tweak */
              --chip-spacing: 8px;
            }

  # ===== ROW 2: telemetry (centered, equal width chips) =====
  - type: custom:mushroom-chips-card
    alignment: center
    chips:
      - type: template
        icon: mdi:printer-3d-nozzle-heat
        content: "{{ (states('sensor.k1c_nozzle_temperature')|float(0))|round(1) }} °C"
      - type: template
        icon: mdi:heating-coil
        content: "{{ (states('sensor.k1c_bed_temperature')|float(0))|round(1) }} °C"
      - type: template
        icon: mdi:thermometer
        content: "{{ (states('sensor.k1c_box_temperature')|float(0))|round(1) }} °C"
      - type: template
        icon: mdi:progress-clock
        content: >
          {% set s = states('sensor.k1c_print_time_left')|int(0) %}
          {% set h = (s // 3600) %}{% set m = (s % 3600) // 60 %}{% set sec = s % 60 %}
          {% if h > 0 %}{{ '%d:%02d:%02d'|format(h, m, sec) }}{% elif m > 0 %}{{ '%d:%02d'|format(m, sec) }}{% else %}{{ sec }}s{% endif %}
      - type: template
        icon: mdi:layers-triple
        content: "L {{ states('sensor.k1c_working_layer') }}/{{ states('sensor.k1c_total_layers') }}"
    card_mod:
      style: |
        ha-card{ --ha-card-border-width: 0; padding: 6px 8px 10px 8px; --chip-spacing: 8px; }
        mushroom-chip-set { display: flex; justify-content: center; flex-wrap: wrap; }
        mushroom-chip { flex: 1 0 120px; max-width: 160px; }

card_mod:
  style: "ha-card{border-radius:16px; overflow:hidden}"
